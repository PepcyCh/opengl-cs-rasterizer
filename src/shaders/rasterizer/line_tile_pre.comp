#version 460

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer InPositions {
    float i_positions[];
};
layout(std430, binding = 1) readonly buffer InNormals {
    float i_normals[];
};
layout(std430, binding = 2) readonly buffer InIndices {
    uint i_indices[];
};

struct Vertex {
    vec3 pos_world;
    float screen_x;
    vec3 normal_world;
    float screen_y;
    vec4 homo;
    vec3 clip;
    float inv_w;
};
layout(std430, binding = 3) writeonly buffer OutVertices {
    Vertex o_vertices[];
};

layout(std430, binding = 4) buffer OutListsNum {
    uint o_lists_num[];
};
#define MAX_TRIANGLES_PER_TILE 1024
struct ListTriangle {
    uint min_x;
    uint max_x;
    uint tri_index;
    float inv_area;
};
layout(std430, binding = 5) writeonly buffer OutLists {
    ListTriangle o_lists[];
};

layout(binding = 6) uniform RasterizerStates {
    mat4 model;
    mat4 model_it;
    mat4 view;
    mat4 proj;
    uint viewport_width;
    uint viewport_height;
};

layout(binding = 7) uniform DrawArguments {
    uint num_indices;
    uint first_index;
    uint vertex_offset;
};

struct TriPart {
    float x[4];
    float y[2];
    float dx[2];
};

float vec2_cross(vec2 a, vec2 b) {
    return a.x * b.y - a.y * b.x;
}

bool inside_clip(vec3 clip) {
    return clip.x >= -1.0 && clip.x <= 1.0 && clip.y >= -1.0 && clip.y <= 1.0 && clip.z >= -1.0 && clip.z <= 1.0;
}

void main() {
    const uint tri_index = gl_GlobalInvocationID.x;
    if (tri_index * 3 >= num_indices) {
        return;
    }

    Vertex vert[3];
    for (uint i = 0; i < 3; i++) {
        const uint index = vertex_offset + i_indices[first_index + tri_index * 3 + i];
        const vec3 pos_local = vec3(i_positions[index * 3], i_positions[index * 3 + 1], i_positions[index * 3 + 2]);
        const vec3 normal_local = vec3(i_normals[index * 3], i_normals[index * 3 + 1], i_normals[index * 3 + 2]);
        const vec4 pos_world = model * vec4(pos_local, 1.0);
        vert[i].pos_world = pos_world.xyz;
        vert[i].homo = proj * view * pos_world;
        vert[i].normal_world = mat3(model_it) * normal_local;
        vert[i].inv_w = 1.0 / vert[i].homo.w;
        vert[i].clip = vert[i].homo.xyz * vert[i].inv_w;
        vert[i].screen_x = (vert[i].clip.x * 0.5 + 0.5) * viewport_width;
        vert[i].screen_y = (0.5 - vert[i].clip.y * 0.5) * viewport_height;
    }
    o_vertices[tri_index * 3] = vert[0];
    o_vertices[tri_index * 3 + 1] = vert[1];
    o_vertices[tri_index * 3 + 2] = vert[2];

    bool inside0 = inside_clip(vert[0].clip);
    bool inside1 = inside_clip(vert[1].clip);
    bool inside2 = inside_clip(vert[2].clip);
    if (!inside0 && !inside1 && !inside2) {
        return;
    }

    const vec2 p1 = vec2(vert[1].screen_x, vert[1].screen_y) - vec2(vert[0].screen_x, vert[0].screen_y);
    const vec2 p2 = vec2(vert[2].screen_x, vert[2].screen_y) - vec2(vert[0].screen_x, vert[0].screen_y);
    const float area = vec2_cross(p1, p2);
    const bool is_front_face = area < 0.0;
    if (area == 0) {
        return;
    }
    if (!is_front_face) {
        return;
    }
    const float inv_area = 1.0 / area;

    uint top = 0;
    if (vert[1].screen_y < vert[top].screen_y) {
        top = 1;
    }
    if (vert[2].screen_y < vert[top].screen_y) {
        top = 2;
    }
    uint bottom = 2;
    if (vert[1].screen_y > vert[bottom].screen_y) {
        bottom = 1;
    }
    if (vert[0].screen_y > vert[bottom].screen_y) {
        bottom = 0;
    }
    const uint middle = 3 - top - bottom;

    const float inv_y = 1.0 / (vert[bottom].screen_y - vert[top].screen_y);
    TriPart tri_parts[2];
    uint num_parts = 0;
    if (vert[middle].screen_y == vert[top].screen_y) {
        tri_parts[0].y[0] = vert[top].screen_y;
        tri_parts[0].y[1] = vert[bottom].screen_y;
        tri_parts[0].x[0] = min(vert[top].screen_x, vert[middle].screen_x);
        tri_parts[0].x[1] = max(vert[top].screen_x, vert[middle].screen_x);
        tri_parts[0].x[2] = vert[bottom].screen_x;
        tri_parts[0].x[3] = vert[bottom].screen_x;
        tri_parts[0].dx[0] = (tri_parts[0].x[2] - tri_parts[0].x[0]) * inv_y;
        tri_parts[0].dx[1] = (tri_parts[0].x[3] - tri_parts[0].x[1]) * inv_y;
        num_parts = 1;
    } else if (vert[middle].screen_y == vert[bottom].screen_y) {
        tri_parts[0].y[0] = vert[top].screen_y;
        tri_parts[0].y[1] = vert[bottom].screen_y;
        tri_parts[0].x[0] = vert[top].screen_x;
        tri_parts[0].x[1] = vert[top].screen_x;
        tri_parts[0].x[2] = min(vert[bottom].screen_x, vert[middle].screen_x);
        tri_parts[0].x[3] = max(vert[bottom].screen_x, vert[middle].screen_x);
        tri_parts[0].dx[0] = (tri_parts[0].x[2] - tri_parts[0].x[0]) * inv_y;
        tri_parts[0].dx[1] = (tri_parts[0].x[3] - tri_parts[0].x[1]) * inv_y;
        num_parts = 1;
    } else {
        tri_parts[0].y[0] = vert[top].screen_y;
        tri_parts[0].y[1] = vert[middle].screen_y;
        tri_parts[0].x[0] = vert[top].screen_x;
        tri_parts[0].x[1] = vert[top].screen_x;
        tri_parts[1].y[0] = vert[middle].screen_y;
        tri_parts[1].y[1] = vert[bottom].screen_y;
        tri_parts[1].x[2] = vert[bottom].screen_x;
        tri_parts[1].x[3] = vert[bottom].screen_x;
        float dx = (vert[bottom].screen_x - vert[top].screen_x) * inv_y;
        float mx = vert[top].screen_x + dx * (vert[middle].screen_y - vert[top].screen_y);
        vec2 tm = vec2(vert[middle].screen_x, vert[middle].screen_y) - vec2(vert[top].screen_x, vert[top].screen_y);
        vec2 tb = vec2(vert[bottom].screen_x, vert[bottom].screen_y) - vec2(vert[top].screen_x, vert[top].screen_y);
        if (vec2_cross(tm, tb) < 0.0) {
            tri_parts[0].x[2] = vert[middle].screen_x;
            tri_parts[1].x[0] = vert[middle].screen_x;
            tri_parts[0].x[3] = mx;
            tri_parts[1].x[1] = mx;
            tri_parts[0].dx[1] = dx;
            tri_parts[1].dx[1] = dx;
            tri_parts[0].dx[0] = (tri_parts[0].x[2] - tri_parts[0].x[0]) / (tri_parts[0].y[1] - tri_parts[0].y[0]);
            tri_parts[1].dx[0] = (tri_parts[1].x[2] - tri_parts[1].x[0]) / (tri_parts[1].y[1] - tri_parts[1].y[0]);
        } else {
            tri_parts[0].x[3] = vert[middle].screen_x;
            tri_parts[1].x[1] = vert[middle].screen_x;
            tri_parts[0].x[2] = mx;
            tri_parts[1].x[0] = mx;
            tri_parts[0].dx[0] = dx;
            tri_parts[1].dx[0] = dx;
            tri_parts[0].dx[1] = (tri_parts[0].x[3] - tri_parts[0].x[1]) / (tri_parts[0].y[1] - tri_parts[0].y[0]);
            tri_parts[1].dx[1] = (tri_parts[1].x[3] - tri_parts[1].x[1]) / (tri_parts[1].y[1] - tri_parts[1].y[0]);
        }
        num_parts = 2;
    }

    for (uint i = 0; i < num_parts; i++) {
        int min_y = max(0, int(tri_parts[i].y[0] + 0.5));
        float sy = min_y + 0.5 - tri_parts[i].y[0];
        float lx = tri_parts[i].x[0] + tri_parts[i].dx[0] * sy;
        float rx = tri_parts[i].x[1] + tri_parts[i].dx[1] * sy;
        int max_y = min(int(viewport_height) - 1, int(tri_parts[i].y[1] - 0.5));
        for (int y = min_y; y <= max_y; y++) {
            int min_x = max(0, int(lx + 0.5));
            int max_x = min(int(viewport_width) - 1, int(rx - 0.5));
            
            if (max_x >= min_x) {
                uint idx_j = atomicAdd(o_lists_num[y], 1);
                if (idx_j < MAX_TRIANGLES_PER_TILE) {
                    uint idx = y * MAX_TRIANGLES_PER_TILE + idx_j;
                    ListTriangle list_tri = ListTriangle(min_x, max_x, tri_index, inv_area);
                    o_lists[idx] = list_tri;
                }
            }

            lx += tri_parts[i].dx[0];
            rx += tri_parts[i].dx[1];
        }
    }
}
